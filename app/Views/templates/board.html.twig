{% include "head.html.twig"%}
        <link
            rel="stylesheet"
            href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
            />
        <style>
        {{ source("./assets/style/board.css") }}
        </style>
    </head>
    <body>
{% block body %}

    {% if sessions is defined %}
            <div id="topbar">
                <div id="stackDraw">
                    <img id="drawCarte" src="../{{ drawPile[0]['path_to_verso'] }}" alt="stack draw" class="card" draggable="false"/>
                </div>
                <div id="actions">
                    <div id="actionDraw"> 
                        <button class="action" id="draw">Piocher</button>
                        <button class="action" id="nextDraw">Carte suivante</button>
                        <button class="action" id="shuffle">Mélanger</button>
                    </div>
                    <div id="actionCards">
                        <button class="action" id="backToDraw">Retour pioche</button>
                        <button class="action" id="discard">Défausser</button>
                        <button class="action" id="combine">Combiner</button>
                        <button class="action" id="ungroup">Dégrouper</button>
                        <div id="cancelConfirm">
                            <button class="action material-symbols-outlined" id="cancel"> close </button>
                            <button class="action material-symbols-outlined" id="confirm"> check </button>
                        </div>
                    </div>
                    <div id="actionDiscard">
                        <button class="action" id="getBack">Récupérer</button>
                        <button class="action" id="nextDiscard">Carte suivante</button>
                    </div>
                </div>
                <div id="stackDiscard">
                    <img id='discardCard'  alt="discard pile" class="card" draggable="false"/>
                </div>
            </div>
            <div id="board">
                <div id="cards">
                    {% for card in gameboard %}
                    <div class="cardContainer">
                        <img src="../{{ card['path_to_recto'] }}" alt="card_{{ card['id'] }}"  class="card" data-id="{{ card['id'] }}" draggable="false"/>
                    </div>
                    {% endfor %}
                </div>
                <div id="boardMenu">
                    <form id="save_form" method="post" action="/save">
                        <input type="submit" name"submit" id="save" value="Sauvegarder">
                        <input type= "hidden" name="draw_pile" id="draw_pile" value="">
                        <input type= "hidden" name="discard_pile" id="discard_pile" value="">
                        <input type= "hidden" name="gameboard_pile" id="gameboard_pile" value="">
                        <input type= "hidden" name="game_id" value={{gameId}}>
                    </form>
                    <button id="backToMenu">Menu</button>
                    <div id="popup_form_menu">
                        <p>Êtes vous sûr de vouloir quitter sans sauvegarder ?</p>
                        <form id="form_menu" method="post" action="/menu">
                            <input type="submit" id="yes_b2menu" value="Oui">
                        </form>
                        <button id="no_menu">Non</button>
                    </div>
                    <button id="endGame">Terminer la partie</button>
                    <div id="popup_form_end">
                        <p>Terminer la partie supprimera votre sauvegarde et vous renverra au menu.</p>
                        <form id="form_end" method="post" action="/endGame">
                            <input type="submit" id="yes_end" value="Oui">
                            <input type= "hidden" name="game_id" value={{gameId}}>
                        </form>
                        <button id="no_end">Non</button>
                    </div>
                </div>
            </div>
    {% else %}
        <script> window.location.href = "/"; </script>
    {% endif %}

<script>
    // Cartes actuellement selectionnées en jeu 
    let selectedCards = [];

    {# RECUPERATION DES TABLEAU DE CARTES  #}
    let drawPile = {{ drawPile|json_encode|raw }};
    let discardPile = {{ discardPile|json_encode|raw }};
    let gameboard = {{ gameboard|json_encode|raw }};

    let deckPath = gameboard[0]['path_to_verso'].split('/');
    let deckId = deckPath[3];
    let discardPath = "../img/cards/verso/" + deckId + "/Discard.png";

    if(discardPile.length == 0){
        document.getElementById('discardCard').src = discardPath;
    }else{
        document.getElementById('discardCard').src = "../" + discardPile[0]['path_to_verso'];
        document.getElementById('discardCard').dataset.id = discardPile[0]['id'];
    }

    if(drawPile.length == 0){
        document.getElementById('drawCarte').src = discardPath;
    }else{
        document.getElementById('drawCarte').src = "../" + drawPile[0]['path_to_verso'];
        document.getElementById('drawCarte').dataset.id = drawPile[0]['id'];
    }

    {# GESTION DES ACTIONS  #}



    // Mode combinaison qui autorise la selection de plusieurs cartes
    let combineMode = false;

    // Boutons de l'interface
    let drawButton = document.getElementById("draw");
    let nextDrawButton = document.getElementById("nextDraw");
    let shuffleButton = document.getElementById("shuffle");
    let discardButton = document.getElementById("discard");
    let backToDrawButton = document.getElementById("backToDraw");
    let ungroupButton = document.getElementById("ungroup");
    let combineButton = document.getElementById("combine");
    let cancelButton = document.getElementById("cancel");
    let confirmButton = document.getElementById("confirm");
    let getBackButton = document.getElementById("getBack");
    let nextDiscardButton = document.getElementById("nextDiscard");

    // Fonction de gestion des boutons, seuls ceux en paramètre sont actifs 
    function enableOnly (arrayOfButtons) {
        discardButton.disabled = true;
        backToDrawButton.disabled = true;
        ungroupButton.disabled = true;
        combineButton.disabled = true;
        cancelButton.disabled = true;
        confirmButton.disabled = true;
        arrayOfButtons.forEach(button => {
            button.disabled = false;
        });
    }
    enableOnly([discardButton, backToDrawButton, ungroupButton, combineButton]);
    
    // Fonction qui donne l'event listener de selection a une carte
    function selectCardsListener (card) {
        card.addEventListener("click", function() {
            let container = card.parentNode;
            let brothers = container.querySelectorAll(".card");
            if (brothers.length > 1) {
                if (brothers[0].classList.contains("selected")) {
                    brothers.forEach(brother => {
                        brother.classList.remove("selected");
                        selectedCards.splice(selectedCards.indexOf(brother.dataset.id), 1);
                    });
                } else {
                    if (combineMode == false && selectedCards.length > 0) {
                        cancelSelection();
                    }
                    brothers.forEach(brother => {
                        brother.classList.add("selected");
                        if (!selectedCards.includes(brother)) {
                            selectedCards.push(brother);
                        }
                    });
                }
            } else {
                if (selectedCards.includes(card)) {
                    card.classList.remove("selected");
                    selectedCards.splice(selectedCards.indexOf(card), 1);
                } else {
                    if (combineMode == false && selectedCards.length > 0) {
                            cancelSelection();
                    }
                    card.classList.add("selected");
                    selectedCards.push(card);
                }      
            }
        });
    }
    // Donne l'event listener aux cartes déjà visibles dans le gameboard
    gameboard.forEach(card => {
        let cardElement = document.querySelector(`[data-id="${card['id']}"]`);
        if (card['id'] != "Main") {
            selectCardsListener(cardElement);
        }
    });

    // Fonction qui gère l'affichage des cartes du tableau de jeu
    function adaptCardContainerWidth() {
    let containers = Array.from(document.getElementsByClassName("cardContainer"));
        containers.forEach(container => {
            let cardCount = container.childElementCount;
            if (cardCount > 0) {
                let cardWidth = document.getElementsByClassName("card")[0].offsetWidth;
                let space = 0.3 * cardWidth;
                let marginRight = cardCount * space;    

                container.style.margin = `0 ${marginRight}px 0 0`;

                let cards = Array.from(container.children);
                for (let i = 0; i < cards.length; i++) {
                    cards[i].style.left = `${i * space}px`;
                }
            } else {
                container.remove();
            }
        });
    }
    // Cette fontion est utilisée lors du chargement de la page
    adaptCardContainerWidth();
    // Et lorsque la page change de taille
    window.addEventListener("resize", adaptCardContainerWidth);

    // Fonction permettant de rentrer dans le mode de selection de plusieurs cartes
    function enterCombineMode() {
        enableOnly([cancelButton, confirmButton]);
        combineMode = true;
    }
    combineButton.addEventListener("click", enterCombineMode);

    // Fonction qui retire la selection de toutes les cartes
    function cancelSelection() {
        selectedCards.forEach(card => {
            card.classList.remove("selected");
        });
        selectedCards = [];
    }

    // Fonction permettant de sortir du mode de selection de plusieurs cartes
    function exitCombineMode() {
        enableOnly([discardButton, backToDrawButton, ungroupButton, combineButton]);
        combineMode = false;
        cancelSelection();
    }
    cancelButton.addEventListener("click", exitCombineMode);

    // Fonction permettant de grouper les cartes selectionnées
    function combineCards() {
        if (selectedCards.length > 1) {
            let parentDiv = selectedCards[0].parentElement;
            for (let i = 1; i < selectedCards.length; i++) {
                let emptyDiv = selectedCards[i].parentElement;
                parentDiv.appendChild(selectedCards[i]);
                if (emptyDiv.childElementCount == 0) {
                    emptyDiv.remove();
                }
            }
            adaptCardContainerWidth();
            exitCombineMode();
        }
    }
    confirmButton.addEventListener("click", combineCards);

    // Fonction permettant de dégrouper les cartes selectionnées
    function ungroupCards() {
        if (selectedCards.length > 0) {
            let container = selectedCards[0].parentNode;
            let brothers = container.querySelectorAll(".card");
            if (brothers.length > 1) {

                let cards = document.getElementById("cards");


                for (let i = 1; i < selectedCards.length; i++) {

                    let newDiv = document.createElement("div");
                    newDiv.classList.add("cardContainer");
                    cards.appendChild(newDiv);
                    newDiv.appendChild(selectedCards[i]);

                    
                }
                cancelSelection();

                adaptCardContainerWidth();
            }
        }
    }
    ungroupButton.addEventListener("click", ungroupCards);

    {# FONCTIONS D'ACTION SUR L'AFFICHAGE ET LES TABLEAU DE CARTE #}
    let  i = 1;

    {# event listener pour envoyer les tableaux de cartes dans le form de sauvegarde #}
    let save_form = document.getElementById("save_form")
    save_form.addEventListener('submit', function () {
        document.getElementById("draw_pile").value = JSON.stringify(drawPile);
        document.getElementById("discard_pile").value = JSON.stringify(discardPile);
        document.getElementById("gameboard_pile").value = JSON.stringify(gameboard);
    })
    
    let backToMenuButton = document.getElementById("backToMenu")
    backToMenuButton.addEventListener('click', function () {
        document.getElementById("popup_form_menu").style.display = "block"
    }) 
    let no_button_menu = document.getElementById("no_menu")
    no_button_menu.addEventListener('click', function () {
        document.getElementById("popup_form_menu").style.display = "none"
    })
    let endGameButton = document.getElementById("endGame")
    endGameButton.addEventListener('click', function () {
        document.getElementById("popup_form_end").style.display = "block"
    }) 
    let no_button_end = document.getElementById("no_end")
    no_button_end.addEventListener('click', function () {
        document.getElementById("popup_form_end").style.display = "none"
    })
    
    

    {# FONCTION DE GESTION DES TABLEAUX DE CARTES #}

    document.getElementById("nextDraw").addEventListener("click", function() {
        nextCard("draw");
    });
    document.getElementById("shuffle").addEventListener("click", 
        function() {
            drawPile = shuffle(drawPile);
            nextCard("draw");
        }
    );
    document.getElementById("draw").addEventListener("click", draw);
    document.getElementById("discard").addEventListener("click", discard);
    document.getElementById("nextDiscard").addEventListener("click", function() {
        nextCard("discard");
    });
    document.getElementById("getBack").addEventListener("click", getDiscard);
    document.getElementById("backToDraw").addEventListener("click", backToDraw);

    {# FONCTION QUI PERMET DE PIOCHER LA CARTE COURANTE DANS LA PIOCHE #}
    function draw(){
        if(drawPile.length == 0){
            return;
        }
        let draw = document.getElementById("drawCarte");
        // retrouve la carte dans le tableau de carte
        let card = drawPile.find(card => card.id == draw.dataset.id);
        // ajoute la carte au tableau de carte du plateau
        gameboard.push(card);
        // ajoute la carte au html
        let cardContainer = document.createElement("div");
        cardContainer.classList.add("cardContainer");
        let newCard = document.createElement("img");
        newCard.src = `../${card.path_to_recto}`;
        newCard.alt = `card_${card.id}`;
        newCard.classList.add("card");
        newCard.dataset.id = card.id;
        newCard.draggable = false;
        cardContainer.appendChild(newCard);
        document.getElementById("cards").appendChild(cardContainer);
        // donne l'event listener a la carte
        selectCardsListener(newCard);
        // retire la carte du tableau de carte de la pioche
        drawPile.splice(drawPile.indexOf(card), 1);
        //avance d'un index dans le tableau de carte de la pioche
        nextCard("draw");
        adaptCardContainerWidth();
    };

    {# PERMET DE PASSER A LA CARTE SUIVANTE #}
    function nextCard(pile){
        if(pile == "draw"){
            let max = drawPile.length;
            if(max == 0){
                document.getElementById("drawCarte").src = discardPath;
            }else{
                let draw = document.getElementById("drawCarte");
                if(i < max-1){
                    draw.src = `../${drawPile[i].path_to_verso}`;
                    draw.dataset.id = drawPile[i].id;
                    i++;
                }else if( i > max-1){
                    i = 0;
                    draw.src = `../${drawPile[i].path_to_verso}`;
                    draw.dataset.id = drawPile[i].id;
                }else{
                    draw.src = `../${drawPile[i].path_to_verso}`;
                    draw.dataset.id = drawPile[i].id;
                    i = 0;
                }
            }
        }
        if(pile == "discard"){
            let max = discardPile.length;
            if(max == 0){
                document.getElementById("discardCard").src = discardPath;
            }else{
                let draw = document.getElementById("discardCard");
                if(i < max-1){
                    draw.src = `../${discardPile[i].path_to_verso}`;
                    draw.dataset.id = discardPile[i].id;
                    i++;
                }else if( i > max-1){
                    i = 0;
                    draw.src = `../${discardPile[i].path_to_verso}`;
                    draw.dataset.id = discardPile[i].id;
                }else{
                    draw.src = `../${discardPile[i].path_to_verso}`;
                    draw.dataset.id = discardPile[i].id;
                    i = 0;
                }
            }
        }
        
    }
    {# PERMET DE MELANGER LE PAQUET DE CARTE #}
    function shuffle(){
        let numberLength = [];
        for(let i = 0; i < drawPile.length; i++){
            numberLength.push(i);
        }

        let shuffledNumber = numberLength.sort(() => Math.random() - 0.5);

        let shuffledDrawPile = [];
        
        for(let i = 0; i < drawPile.length; i++){

            shuffledDrawPile.push(drawPile[shuffledNumber[i]]);
        }

        return shuffledDrawPile;

    }


    {# FONCTION QUI PERMET DE DEFAUSSER LA CARTE COURANTE #}
    function discard(){
        selectedCards.forEach(cardDelete => {

            let discard = document.getElementById("stackDiscard");
            let card = gameboard.find(card => card.id == cardDelete.dataset.id);
            // On enleve la carte de base du tableau si le tableau fais plus de 1
            if(discardPile.length == 1){
                // trouver la carte avec l'id Discard
                let discardCard = discardPile.find(card => card.id == "Discard");
                if(discardCard){
                    // supprimer la carte de base
                    discardPile.splice(discardPile.indexOf(discardCard), 1);
                }
            }
            // ajoute la carte au tableau de carte de la defausse
            discardPile.push(card);
            // ajoute la carte au html
            let newCard = document.getElementById("discardCard");
            newCard.src = `../${card.path_to_verso}`;
            newCard.alt = `card_${card.id}`;
            newCard.dataset.id = card.id;
            gameboard.splice(gameboard.indexOf(card), 1);
            if (cardDelete.parentNode.children.length > 1) {
                cardDelete.parentNode.remove();
            } else {
                cardDelete.remove();
            }
        });
        cancelSelection();
        adaptCardContainerWidth();
    }

    {# FONCTION QUI PERMET DE RECUPERER LA CARTE ACTUELLE DANS LA DEFAUSSE #}
    function getDiscard(){
        if(discardPile.length == 1){
            if (discardPile[0].id == "Discard"){
                return;
            }
        }       
        let discard = document.getElementById("discardCard");
        let card = discardPile.find(card => card.id == discard.dataset.id);
        if(card == undefined){
            return;
        }
        gameboard.push(card);
        discardPile.splice(discardPile.indexOf(card), 1);
        let cardContainer = document.createElement("div");
        cardContainer.classList.add("cardContainer");
        let newCard = document.createElement("img");
        newCard.src = `../${card.path_to_recto}`;
        newCard.alt = `card_${card.id}`;
        newCard.classList.add("card");
        newCard.draggable = false;
        newCard.dataset.id = card.id;
        cardContainer.appendChild(newCard);
        document.getElementById("cards").appendChild(cardContainer);
        selectCardsListener(newCard);
        nextCard("discard");
        adaptCardContainerWidth();
    }

    {# FONCTION QUI PERMET DE RETOURNER LA CARTE SELECTIONNER DANS LA PIOCHE #}
    function backToDraw(){
        let cardToDraw;
        selectedCards.forEach(card => {
    
            for (let j = 1 ; j < gameboard.length; j++){
                if(gameboard[j].id == card.dataset.id){
                    cardToDraw = gameboard[j];
                    break;
                }
            }
            let draw = document.getElementById("stackDraw");
            drawPile.push(cardToDraw);
            gameboard.splice(gameboard.indexOf(cardToDraw), 1);
            if (card.parentNode.children.length > 1) {
                card.parentNode.remove();
            } else {
                card.remove();
            }
            cancelSelection();
            if(drawPile.length == 1 ){
                nextCard("draw");
            }

        });
        adaptCardContainerWidth();
    }


</script>

{% endblock %}

{% include "footer.html.twig"%}